{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Currently in development: </p>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Attachments</li> <li>UE5 Troubleshooting</li> </ul>"},{"location":"#what-is-the-advent-guard","title":"What is the Advent Guard?","text":"<p>Legion of AI driven machines deployed on remote worlds to study, defend and prepare for the arrival of humans.</p>"},{"location":"#what-game-are-you-making","title":"What game are you making?","text":"<p>I'm not sure what genre the concept behind Advent Guard neatly fits into; it might be best to start with the four inspirations behind the project: </p> <p>Mechwarrior (Most of them) The obvious and low hanging fruit of all the list - Mechwarrior excelled at giving players very technical control over their mechs and that level of control over our exoskeletons is no different and a driving force behind this project. Numbers matter and feeling like you are really in control of tuning your loadout matters. </p> <p>One Must Fall 2097 THE Robot battler of the PC Gamer demo disk era. Forget Street Fighter and Mortal Kombat! So many LAN parties started and ended with that amazing synthetic theme song. Egos were bruised and cries could be heard for miles, and we skill talk about our childhood tournaments to this day. A lot of good robotic/mech fighting and arena games have come out since, but the credit for inspiration needs to go to our original inspiration! Advent Guard hopes to capture the intense heavy metal combat and the good feeling gameplay and pure excitement that OMF2097 delivered through fast and weighty gameplay with a large focus on sound effects that put you in the middle of that wonderful crunching metal.</p> <p>Star Wars Galaxies To this day still one of the most innovative and meaningful crafting systems in any game (prior to NGE anyway..). With the dynamic planetary resource spawns and other economic features like player associations, player stores and vendors, this game was a crafters dream. I, myself, played as a Weaponsmith on the Kettemoor server and have been searching for a similar experience in the years since to fill the void left by this gem. Advent Guard aims to have every attachment be a truly unique item that stems from a complex resource statistic driven crafting system.</p> <p>Eve Online Known everywhere for its fully player driven economy and massive headline gaining battles - which is an inspiration in itself. However what always inspired us the most about Eve Online is how CCP found an interesting way to handle ship loadouts to expand just beyond normal \"slots\" and allowed players to build complex loadouts for various purposes to work together. Player could have the same ship but play it hundreds of different ways based on the loadout they used. Playing for years, I always thought \"This would be so cool if there was a game that handles robots the same way!\" Advent Guard is that game.</p> <p>This repo and wiki will serve as the public facing documentation for the project so please feel free to comment, suggest and participate here or on our social media!</p> <p>Keep tabs on the Dev Stream over at CarbyneGames.com and help us bring this to life!</p> <p>Please follow our other socials to help support and keep tabs on the project! - Twitter: twitter.com/CarbyneGames - TikTok: tiktok.com/@carbyne.games - Insta: instagram.com/carbyne.games - Discord: discord.gg/6skRnvGxfV - Patreon: patreon.com/carbynegames - Linktree: linktr.ee/CarbyneGames - Web: carbynegames.com</p>"},{"location":"instructions/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"instructions/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"instructions/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"instructions/#lists","title":"Lists","text":""},{"location":"instructions/#list","title":"List","text":"<ul> <li>List 1</li> <li> <p>List 2</p> <ul> <li>List 1</li> <li>List 2</li> </ul> </li> </ul>"},{"location":"instructions/#numbered","title":"Numbered","text":"<ol> <li>Numbered 1</li> <li>Numbered 2<ol> <li>Numbered 1</li> <li>Numbered 2<ol> <li>Numbered 1</li> </ol> </li> </ol> </li> </ol>"},{"location":"instructions/#checklists","title":"Checklists","text":"<ul> <li> Item 1</li> <li> Item 2<ul> <li> Item 1</li> <li> Item 2</li> <li> Item 3</li> </ul> </li> <li> Item 3</li> </ul>"},{"location":"instructions/#definitions","title":"Definitions","text":"<code>Definition Name</code> <p>Definition description.</p>"},{"location":"instructions/#content-tabs-w-code-blocks","title":"Content Tabs w/ Code Blocks","text":"CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n} \n</code></pre>"},{"location":"instructions/#grids","title":"Grids","text":"<ul> <li> <p> Set up in 5 minutes</p> <p>Install <code>mkdocs-material</code> with <code>pip</code> and get up and running in minutes</p> <p> Getting started</p> </li> <li> <p> It's just Markdown</p> <p>Focus on your content and generate a responsive and searchable static site</p> <p> Reference</p> </li> <li> <p> Made to measure</p> <p>Change the colors, fonts, language, icons, logo and more with a few lines</p> <p> Customization</p> </li> <li> <p> Open Source, MIT</p> <p>Material for MkDocs is licensed under MIT and available on [GitHub]</p> <p> License</p> </li> </ul>"},{"location":"instructions/#icons","title":"Icons","text":"<ul> <li>Material Design</li> <li>FontAwesome</li> <li>Octicons</li> <li>Simple Icons</li> </ul>"},{"location":"Advent%20Guard/attachments/","title":"Attachments","text":"<p>Back to Hub</p>"},{"location":"Advent%20Guard/attachments/#how-attachments-work-in-advent-guard","title":"How Attachments work in Advent Guard","text":"<p>In Advent Guard each exoskeleton can be retrofitted with an assortment of Attachments so the player can completely set up their loadouts to their playstyle. </p> <p>Attachments generally fall under one of these types:</p> <p>Launchers </p> <p>Launchers are usually front-facing slots that fire various types of missiles. This could be homing, rapid fire or even high angle rockets to get around barriers.</p> <p>Cannons</p> <p>Cannons are usually arm/side based slots (but could overlap with launcher compatibility, e.g. a front slot could be compatible with both a small launcher or a small cannon attachment) and are smaller caliber projectile based weapons, usually a very high rate of fire but generally manual aiming.</p> <p>Turrets</p> <p>Usually top/upwards facing slots (e.g. top of head or large shoulders), these pop up and can rotate a full 360 degrees and can automatically lock on to enemies, some with auto-firing.</p> <p>Energy</p> <p>Compatible on front/top side facing slots, these weapons pop out and can fire energy based ammo. Railguns, pulse shots, even sonic wave based weapons would fall under energy. These could be manual or automatic locking in advanced attachments.</p> <p>Deployables</p> <p>Front or back facing slots where a gadget comes out of the exoskeleton that has its OWN functionality. This could be mines, deployable shields, even real-time grappling hook.</p> <p>Support</p> <p>This is an internal slot with no physically shown attachment (other than when picking up from the world) that calls help from external support systems. It could be an attachment that calls for a repair or to repair a teammate, an overhead bombing run, or an orbital strike. This could even be calling in other exoskeletons from your or your teams arsenal.</p> <p>Utility</p> <p>Utility attachments are also internal with no physically shown attachment. These attachment provide an internal function for the player or team. Resource scanners, enemy scanners, enemy shield disruptors, cloaking devices would fall under utility attachments.</p> <p>Chips</p> <p>Chips are internal upgrades for the exoskeletons also with with no physically shown attachment at run-time. These can upgrade speed, firing rate, damage amplifiers.. anything really.</p> <p>These attachments are fitted into large mechanical exoskeletons which have varying types of slots depending on the exo chassis. Each attachment the player crafts or loots in the world has a compatible slot type(s) that will let the user know where they can insert the attachment on the exoskeleton. Smaller exoskeletons will support smaller sized slots while larger and heavier exoskeletons will be capable of handling the larger slot types. The slot sizes and types are:</p>"},{"location":"Advent%20Guard/character%20setup/","title":"Character Setup","text":""},{"location":"troubleshooting/UE5.troubleshooting/","title":"Unreal Engine 5 Troubleshooting","text":""},{"location":"troubleshooting/UE5.troubleshooting/#showflag","title":"Showflag","text":"<p>You can run <code>showflag</code> from the console.</p> <p>An example of a normal <code>showflag</code> result:  </p> <p></p> <p>An example with high drawcalls:  </p> <p></p>"}]}